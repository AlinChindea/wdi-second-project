"use strict";$(function(){var e=$(".map"),a=null;$("#loginform").validate(),$("#signupform").validate({rules:{firstName:"required",lastName:"required",username:{required:!0,minlength:2},email:{required:!0,email:!0},password:{required:!0,minlength:2},passwordConfirmation:{required:!0,minlength:2,equalTo:"#password"}},messages:{firstName:"Please enter your firstname",lastName:"Please enter your lastname",username:{required:"Please enter a username",minlength:"Your username must consist of at least two characters"},password:{required:"Please provide a password",minlength:"Your password must be at least two characters long"},passwordConfirmation:{required:"Please provide a password",minlength:"Your password must be at least two characters long",equalTo:"Please enter the same password as above"},email:"Please enter a valid email address"},errorElement:"em"}),function(){var t=new google.maps.LatLngBounds,s=new google.maps.DirectionsService,r=new google.maps.DirectionsRenderer,n=new google.maps.DistanceMatrixService,o={lat:parseFloat($("#startPointLat").val()),lng:parseFloat($("#startPointLng").val())},i={lat:parseFloat($("#endPointLat").val()),lng:parseFloat($("#endPointLng").val())};function l(e){new google.maps.Marker({position:e,map:a}),t.extend(e)}a=new google.maps.Map(e.get(0),{zoom:12,center:o}),l(o),l(i),a.fitBounds(t),r.setMap(a),s.route({origin:o,destination:i,travelMode:"BICYCLING"},function(e,a){"OK"===a?r.setDirections(e):window.alert("Directions request failed due to "+a)}),n.getDistanceMatrix({origins:[o],destinations:[i],travelMode:"BICYCLING",unitSystem:google.maps.UnitSystem.METRIC},function(e){var a=e.rows[0].elements[0].distance.text,t=e.rows[0].elements[0].duration.text;$(".distance").text("Distance: "+a),$(".duration").text("Duration: "+t)}),(new google.maps.BicyclingLayer).setMap(a)}()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyIkIiwiJG1hcCIsIm1hcCIsInZhbGlkYXRlIiwicnVsZXMiLCJmaXJzdE5hbWUiLCJsYXN0TmFtZSIsInVzZXJuYW1lIiwibWlubGVuZ3RoIiwicmVxdWlyZWQiLCJlbWFpbCIsInBhc3N3b3JkIiwicGFzc3dvcmRDb25maXJtYXRpb24iLCJtZXNzYWdlcyIsImVxdWFsVG8iLCJpbml0TWFwIiwiYm91bmRzIiwiZ29vZ2xlIiwibWFwcyIsIkxhdExuZ0JvdW5kcyIsImRpcmVjdGlvbnNTZXJ2aWNlIiwiRGlyZWN0aW9uc1NlcnZpY2UiLCJEaXJlY3Rpb25zUmVuZGVyZXIiLCJkaXN0YW5jZUNhbGN1bGF0b3IiLCJsYXQiLCJwYXJzZUZsb2F0IiwidmFsIiwibG5nIiwic3RhcnRQb2ludCIsImVuZFBvaW50IiwiY3JlYXRlTWFya2VyIiwibG9jYXRpb24iLCJNYXJrZXIiLCJwb3NpdGlvbiIsImV4dGVuZCIsIk1hcCIsImdldCIsInpvb20iLCJyb3V0ZSIsIm9yaWdpbiIsImNhbGN1bGF0ZUFuZERpc3BsYXlSb3V0ZSIsImRlc3RpbmF0aW9uIiwidHJhdmVsTW9kZSIsImRpcmVjdGlvbnNEaXNwbGF5Iiwic2V0RGlyZWN0aW9ucyIsInJlc3BvbnNlIiwid2luZG93IiwiYWxlcnQiLCJzdGF0dXMiLCJnZXREaXN0YW5jZU1hdHJpeCIsIm9yaWdpbnMiLCJkZXN0aW5hdGlvbnMiLCJVbml0U3lzdGVtIiwiTUVUUklDIiwidW5pdFN5c3RlbSIsImVsZW1lbnRzIiwiZHVyYXRpb24iLCJyb3dzIiwidGV4dCIsIkJpY3ljbGluZ0xheWVyIiwic2V0TWFwIiwiZXJyb3JFbGVtZW50Il0sIm1hcHBpbmdzIjoiYUFBQUEsRUFBQSxXQUdFLElBQU1DLEVBQU9ELEVBQUUsUUFEZkUsRUFBTSxLQUNORixFQUFBLGNBQWVHLFdBQ2ZILEVBQUEsZUFBQUcsVUFDRUMsT0FDQUMsVUFBRixXQUNFRCxTQUFPLFdBQ0xDLFVBQ0FDLFVBQVUsRUFDVkMsVUFBVSxHQUVSQyxPQUxHQyxVQUFBLEVBT0xDLE9BQU8sR0FFTEEsVUFUR0QsVUFBQSxFQVdMRSxVQUFVLEdBRVJILHNCQWJHQyxVQUFBLEVBZUxHLFVBQUFBLEVBQ0VILFFBQUFBLGNBRG9CSSxVQWhCQVIsVUFBQSw4QkFzQnhCUSxTQUFVLDZCQUNSUixVQUNBQyxTQUFVLDBCQUNWQyxVQUFVLHlEQUVSQyxVQUxNQyxTQUFBLDRCQU9SRSxVQUFVLHNEQUVSSCxzQkFUTUMsU0FBQSw0QkFXUkcsVUFBQUEscURBQ0VILFFBQUFBLDJDQUVBSyxNQUFBQSxzQ0FFRkosYUFBTyxPQUlYSyxXQUdFLElBQU1DLEVBQXFCLElBQUlDLE9BQU9DLEtBQUtDLGFBRDdDQyxFQUFtQixJQUFBSCxPQUFBQyxLQUFBRyxrQkFDWEwsRUFBZ0NFLElBQUtDLE9BQUFBLEtBQTNDRyxtQkFDTUYsRUFBcUIsSUFBSUgsT0FBT0MsS0FBS0csc0JBRXJDRSxHQUdKQyxJQUFLQyxXQUFXekIsRUFBRSxrQkFBa0IwQixPQUR0Q0MsSUFBTUMsV0FBYTVCLEVBQUEsa0JBQUEwQixRQUFuQkcsR0FNRUwsSUFBS0MsV0FBV3pCLEVBQUUsZ0JBQWdCMEIsT0FEcENDLElBQU1FLFdBQVc3QixFQUFBLGdCQUFBMEIsUUFxQ2hCLFNBQUFJLEVBQUFDLEdBR0MsSUFBSWQsT0FBT0MsS0FBS2MsUUFEbEJDLFNBQVNILEVBQ1A1QixJQUFJZSxJQUFtQkQsRUFBdkJrQixPQUFBSCxHQXhDZTdCLEVBQWpCLElBQUFlLE9BQUFDLEtBQUFpQixJQUFBbEMsRUFBQW1DLElBQUEsSUFNRUMsS0FBTSxHQURSbkMsT0FBVWUsSUFBNkJhLEVBQXZDRixHQU1BRSxFQUFhRCxHQURiQyxFQUFBQSxVQUFhRixHQUNiRSxFQUFhRCxPQUFiM0IsR0FNRWtCLEVBQWtCa0IsT0FEcEJDLE9BQVNDLEVBQ1BwQixZQUFBQSxFQUNFbUIsV0FBUVgsYUFDUmEsU0FBQUEsRUFBYVosR0FDYmEsT0FBQUEsRUFBWUMsRUFBQUMsY0FBQUMsR0FBQUMsT0FBQUMsTUFBQSxvQ0FBQUMsS0FHYnpCLEVBTkQwQixtQkFTRUMsU0FBVXRCLEdBRFpMLGNBQUFBLEdBQ0UyQixXQUFVdEIsWUFDVnVCLFdBQUFBLE9BQWV0QixLQUZvQnVCLFdBQUFDLFFBR25DWCxTQUFBQSxHQUNBWSxJQUFBQSxFQUFZckMsRUFBWW1DLEtBQUFBLEdBQVpHLFNBQXVCRixHQUFBQSxTQUFBQSxLQUNsQ0csRUFBU1gsRUFBVVksS0FBQSxHQUFBRixTQUFBLEdBQUFDLFNBQUFFLEtBRXBCMUQsRUFBQSxhQUFpQjZDLEtBQUFBLGFBQWlCVSxHQUdsQ3ZELEVBQUUsYUFBYTBELEtBQUssYUFBZUYsTUFVdkJ6QixJQUFBQSxPQUFkYixLQUFBeUMsZ0JBQ0RDLE9BQUExRCxHQTdERDJEIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbCBnb29nbGU6aWdub3JlICovXG5cbiQoKCkgPT4ge1xuICBjb25zdCAkbWFwID0gJCgnLm1hcCcpO1xuICBsZXQgbWFwICAgID0gbnVsbDtcbiAgJCgnI2xvZ2luZm9ybScpLnZhbGlkYXRlKCk7XG4gICQoJyNzaWdudXBmb3JtJykudmFsaWRhdGUoe1xuICAgIHJ1bGVzOiB7XG4gICAgICBmaXJzdE5hbWU6ICdyZXF1aXJlZCcsXG4gICAgICBsYXN0TmFtZTogJ3JlcXVpcmVkJyxcbiAgICAgIHVzZXJuYW1lOiB7XG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICBtaW5sZW5ndGg6IDJcbiAgICAgIH0sXG4gICAgICBlbWFpbDoge1xuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgZW1haWw6IHRydWVcbiAgICAgIH0sXG4gICAgICBwYXNzd29yZDoge1xuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgbWlubGVuZ3RoOiAyXG4gICAgICB9LFxuICAgICAgcGFzc3dvcmRDb25maXJtYXRpb246IHtcbiAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgIG1pbmxlbmd0aDogMixcbiAgICAgICAgZXF1YWxUbzogJyNwYXNzd29yZCdcbiAgICAgIH1cbiAgICB9LFxuICAgIG1lc3NhZ2VzOiB7XG4gICAgICBmaXJzdE5hbWU6ICdQbGVhc2UgZW50ZXIgeW91ciBmaXJzdG5hbWUnLFxuICAgICAgbGFzdE5hbWU6ICdQbGVhc2UgZW50ZXIgeW91ciBsYXN0bmFtZScsXG4gICAgICB1c2VybmFtZToge1xuICAgICAgICByZXF1aXJlZDogJ1BsZWFzZSBlbnRlciBhIHVzZXJuYW1lJyxcbiAgICAgICAgbWlubGVuZ3RoOiAnWW91ciB1c2VybmFtZSBtdXN0IGNvbnNpc3Qgb2YgYXQgbGVhc3QgdHdvIGNoYXJhY3RlcnMnXG4gICAgICB9LFxuICAgICAgcGFzc3dvcmQ6IHtcbiAgICAgICAgcmVxdWlyZWQ6ICdQbGVhc2UgcHJvdmlkZSBhIHBhc3N3b3JkJyxcbiAgICAgICAgbWlubGVuZ3RoOiAnWW91ciBwYXNzd29yZCBtdXN0IGJlIGF0IGxlYXN0IHR3byBjaGFyYWN0ZXJzIGxvbmcnXG4gICAgICB9LFxuICAgICAgcGFzc3dvcmRDb25maXJtYXRpb246IHtcbiAgICAgICAgcmVxdWlyZWQ6ICdQbGVhc2UgcHJvdmlkZSBhIHBhc3N3b3JkJyxcbiAgICAgICAgbWlubGVuZ3RoOiAnWW91ciBwYXNzd29yZCBtdXN0IGJlIGF0IGxlYXN0IHR3byBjaGFyYWN0ZXJzIGxvbmcnLFxuICAgICAgICBlcXVhbFRvOiAnUGxlYXNlIGVudGVyIHRoZSBzYW1lIHBhc3N3b3JkIGFzIGFib3ZlJ1xuICAgICAgfSxcbiAgICAgIGVtYWlsOiAnUGxlYXNlIGVudGVyIGEgdmFsaWQgZW1haWwgYWRkcmVzcydcbiAgICB9LFxuICAgIGVycm9yRWxlbWVudDogJ2VtJ1xuICB9KTtcbiAgaW5pdE1hcCgpO1xuXG4gIGZ1bmN0aW9uIGluaXRNYXAoKSB7XG4gICAgY29uc3QgYm91bmRzICAgICAgICAgICAgID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZ0JvdW5kcygpO1xuICAgIGNvbnN0IGRpcmVjdGlvbnNTZXJ2aWNlICA9IG5ldyBnb29nbGUubWFwcy5EaXJlY3Rpb25zU2VydmljZTtcbiAgICBjb25zdCBkaXJlY3Rpb25zRGlzcGxheSAgPSBuZXcgZ29vZ2xlLm1hcHMuRGlyZWN0aW9uc1JlbmRlcmVyO1xuICAgIGNvbnN0IGRpc3RhbmNlQ2FsY3VsYXRvciA9IG5ldyBnb29nbGUubWFwcy5EaXN0YW5jZU1hdHJpeFNlcnZpY2U7XG5cbiAgICBjb25zdCBzdGFydFBvaW50ID0ge1xuICAgICAgbGF0OiBwYXJzZUZsb2F0KCQoJyNzdGFydFBvaW50TGF0JykudmFsKCkpLFxuICAgICAgbG5nOiBwYXJzZUZsb2F0KCQoJyNzdGFydFBvaW50TG5nJykudmFsKCkpXG4gICAgfTtcblxuICAgIGNvbnN0IGVuZFBvaW50ID0ge1xuICAgICAgbGF0OiBwYXJzZUZsb2F0KCQoJyNlbmRQb2ludExhdCcpLnZhbCgpKSxcbiAgICAgIGxuZzogcGFyc2VGbG9hdCgkKCcjZW5kUG9pbnRMbmcnKS52YWwoKSlcbiAgICB9O1xuXG4gICAgbWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcCgkbWFwLmdldCgwKSwge1xuICAgICAgem9vbTogMTIsXG4gICAgICBjZW50ZXI6IHN0YXJ0UG9pbnRcbiAgICB9KTtcblxuICAgIGNyZWF0ZU1hcmtlcihzdGFydFBvaW50KTtcbiAgICBjcmVhdGVNYXJrZXIoZW5kUG9pbnQpO1xuICAgIG1hcC5maXRCb3VuZHMoYm91bmRzKTtcbiAgICBkaXJlY3Rpb25zRGlzcGxheS5zZXRNYXAobWFwKTtcbiAgICBjYWxjdWxhdGVBbmREaXNwbGF5Um91dGUoKTtcblxuICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZUFuZERpc3BsYXlSb3V0ZSgpIHtcbiAgICAgIGRpcmVjdGlvbnNTZXJ2aWNlLnJvdXRlKHtcbiAgICAgICAgb3JpZ2luOiBzdGFydFBvaW50LFxuICAgICAgICBkZXN0aW5hdGlvbjogZW5kUG9pbnQsXG4gICAgICAgIHRyYXZlbE1vZGU6ICdCSUNZQ0xJTkcnXG4gICAgICB9LCBmdW5jdGlvbihyZXNwb25zZSwgc3RhdHVzKSB7XG4gICAgICAgIHN0YXR1cyA9PT0gJ09LJyA/IGRpcmVjdGlvbnNEaXNwbGF5LnNldERpcmVjdGlvbnMocmVzcG9uc2UpIDogd2luZG93LmFsZXJ0KCdEaXJlY3Rpb25zIHJlcXVlc3QgZmFpbGVkIGR1ZSB0byAnICsgc3RhdHVzKTtcbiAgICAgIH0pO1xuXG4gICAgICBkaXN0YW5jZUNhbGN1bGF0b3IuZ2V0RGlzdGFuY2VNYXRyaXgoe1xuICAgICAgICBvcmlnaW5zOiBbc3RhcnRQb2ludF0sXG4gICAgICAgIGRlc3RpbmF0aW9uczogW2VuZFBvaW50XSxcbiAgICAgICAgdHJhdmVsTW9kZTogJ0JJQ1lDTElORycsXG4gICAgICAgIHVuaXRTeXN0ZW06IGdvb2dsZS5tYXBzLlVuaXRTeXN0ZW0uTUVUUklDXG4gICAgICB9LCBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICBjb25zdCBkaXN0YW5jZSA9IHJlc3BvbnNlLnJvd3NbMF0uZWxlbWVudHNbMF0uZGlzdGFuY2UudGV4dDtcbiAgICAgICAgY29uc3QgZHVyYXRpb24gPSByZXNwb25zZS5yb3dzWzBdLmVsZW1lbnRzWzBdLmR1cmF0aW9uLnRleHQ7XG5cbiAgICAgICAgJCgnLmRpc3RhbmNlJykudGV4dCgnRGlzdGFuY2U6ICcgKyBkaXN0YW5jZSk7XG4gICAgICAgICQoJy5kdXJhdGlvbicpLnRleHQoJ0R1cmF0aW9uOiAnICsgZHVyYXRpb24pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlTWFya2VyKGxvY2F0aW9uKSB7XG4gICAgICBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKHtcbiAgICAgICAgcG9zaXRpb246IGxvY2F0aW9uLFxuICAgICAgICBtYXA6IG1hcFxuICAgICAgfSk7XG5cbiAgICAgIGJvdW5kcy5leHRlbmQobG9jYXRpb24pO1xuICAgIH1cbiAgICBjb25zdCBiaWtlTGF5ZXIgPSBuZXcgZ29vZ2xlLm1hcHMuQmljeWNsaW5nTGF5ZXIoKTtcbiAgICBiaWtlTGF5ZXIuc2V0TWFwKG1hcCk7XG4gIH1cbn0pO1xuIl19
